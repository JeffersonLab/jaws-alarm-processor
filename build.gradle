plugins {
    id 'java'
    id 'application'
    id 'distribution'
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.1.0'
    id 'com.github.jk1.dependency-license-report' version '1.16'
}

group 'org.jlab'
version '1.4.0'

ext.confluentVer = '6.0.2'
ext.kafkaVer = '2.6.2'

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-Xlint:unchecked"]
}

repositories {
    mavenCentral()

    maven {
        url "https://packages.confluent.io/maven"
    }
}

dependencies {
    implementation "org.apache.kafka:kafka-streams:" + kafkaVer,
            "io.confluent:kafka-streams-avro-serde:" + confluentVer,
            "org.apache.avro:avro:1.10.2",
            "org.slf4j:slf4j-log4j12:1.7.30",
            "org.jlab:jaws-libj:1.2.0"
    testImplementation "org.apache.kafka:kafka-streams-test-utils:" + kafkaVer,
            "junit:junit:4.13.1"
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

jar {
    archiveFileName = 'jaws-auto-override-processor.jar'
}

application {
    mainClassName = 'org.jlab.jaws.AutoOverrideProcessor'
}

build {
    dependsOn(installDist)
}

installDist.dependsOn(generateLicenseReport)
distTar.dependsOn(generateLicenseReport)
distZip.dependsOn(generateLicenseReport)

run {
    classpath += files('config')
}

distributions {
    main {
        contents {
            from("build/reports/dependency-license") {
                into "dependency-license"
            }
            from('config') {
                into 'config'
            }
        }
    }
}

startScripts {
    classpath += files('config')

    // https://discuss.gradle.org/t/classpath-in-application-plugin-is-building-always-relative-to-app-home-lib-directory/2012
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\config', '%APP_HOME%\\config')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/config', '$APP_HOME/config')
    }
}
